@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix schema: <http://schema.org/> .
@prefix dbo: <http://dbpedia.org/ontology/> .
@prefix my_ns: <http://dsci558.org/rahul-zerui-project/> .

### Awards we should grab
# Grammy:
# Album of the year
# Song of the year

# AMA:
# Favorite Pop/Rock Male Artist
# Favorite Pop/Rock Female Artist
# Favorite Pop/Rock Band/Duo/Group
# Favorite Pop/Rock Album
# Favorite Soul/R&B Male Artist
# Favorite Soul/R&B Female Artist
# Favorite Soul/R&B Album
# Favorite Country Male Artist
# Favorite Country Female Artist
# Favorite Country Band/Duo/Group
# Favorite Country Album

# Billboard:
# Top Artist
# Top Male Artist
# Top Female Artist
# Top Billboard 200 Album
# Top Hot 100 Song

### Non-namespace classes we have to create:
# dbo:RecordLabel  #wikipedia
#   * name
# dbo:MusicGenre #wikipedia
#   * name
# schema:City #songkick
#   * name

#### Main Artist/Group Class ####
# URI: wikipediaUrl
my_ns:MusicalEntity a schema:Class ;
    rdfs:subClassOf schema:MusicGroup ;
    schema:name xsd:string ; #songkick
    schema:alternateName xsd:string ; #wikipedia
    foaf:gender xsd:string ; #musicbrainz (sometimes it might not be there--that's okay) (mb_class)
    dbo:genre dbo:MusicGenre ; #wikipedia
    dbo:recordLabel dbo:RecordLabel ; #wikipedia
    schema:activeYearsStartYear xsd:gYear ; #wikipedia
    my_ns:playsOftenIn schema:City ; #songkick
    my_ns:isBand xsd:boolean ; #musicbrainz (mb_class)
    my_ns:songKickRank xsd:int ; #songkick
    my_ns:appearsOftenWith my_ns:MusicalEntity ; #songkick (you will first have to create all artists, then loop again and for each pair create the two relations)
    my_ns:yearlyTouringData my_ns:YearlyTouringInformation ; #songkick
    my_ns:similarAritst my_ns:MusicalEntity ; #wikipedia
    my_ns:songkickUrl xsd:string ; #songkick
    my_ns:wikipediaUrl xsd:string ; #wikipedia
    my_ns:musicBrainzId xsd:string . #musicbrainz

#### New Properities for MusicalEntity Class ####
my_ns:playsOftenIn a rdf:Property ;
    rdfs:domain schema:MusicGroup ;
    rdfs:range schema:Place .

my_ns:isBand a rdf:Property ;
    rdfs:domain schema:MusicGroup ;
    rdfs:range xsd:boolean .

my_ns:songKickRank a rdf:Property ;
    rdfs:domain schema:MusicGroup ;
    rdfs:range xsd:int .

my_ns:appearsOftenWith a rdf:Property ;
    rdfs:domain schema:MusicGroup ;
    rdfs:range my_ns:MusicalEntity .

my_ns:associatedAct a rdf:Property ;
    rdfs:domain schema:MusicGroup ;
    rdfs:range my_ns:MusicalEntity .

my_ns:yearlyTouringData a rdf:Property ;
    rdfs:domain schema:MusicGroup ;
    rdfs:range my_ns:YearlyTouringInformation .

my_ns:similarAritst a rdf:Property ;
    rdfs:domain schema:MusicGroup ;
    rdfs:range my_ns:MusicalEntity .

my_ns:songkickUrl a rdf:Property ;
    rdfs:domain schema:Thing ;
    rdfs:range xsd:string .

my_ns:wikipediaUrl a rdf:Property ;
    rdfs:domain schema:Thing ;
    rdfs:range xsd:string .

my_ns:musicBrainzId a rdf:Property ;
    rdfs:domain schema:Thing ;
    rdfs:range xsd:string .
### Supporting Classes ###
# URI: musicBrainzId
my_ns:Single a schema:Class ;
    rdfs:subClassOf schema:MusicRecording ;
    schema:name xsd:string ; #musicbrainz
    schema:dateCreated schema:Date ; #musicbrainz
    schema:byArtist my_ns:MusicalEntity ;
    my_ns:musicBrainzId xsd:string . #musicbrainz

# URI: musicBrainzId
my_ns:MusicAlbum a schema:Class ;
    rdfs:subClassOf schema:MusicAlbum ;
    schema:name xsd:string ; #musicbrainz
    schema:dateCreated schema:Date ; #musicbrainz
    schema:byArtist my_ns:MusicalEntity ;
    my_ns:musicBrainzId xsd:string . #musicbrainz

### Used to both create Award Concept(Grammy for Album of the Year) ###
### * name, classification
### and Award Instance (Grammy for Album of the Year in 2011) ###
### * award, year, MusicalEntity, musicWork
### ex: Award_Node_1: name = Grammy, classification = Album of the Year
### ex: Award_Node_2: name = Grammy, classification = Album of the Year
###                   award = Award_Node_1, year = 2011
###                   musicalEntity = Musical_Entity_Node_i,
###                   musicalWork = Creative_Work_Node_j,
###                   winner = False

#uri:name-classification-year or name-classification-year-Musical_Entity_Node_i-
my_ns:MusicAward a schema:Class ; # award data
    rdfs:subClassOf dbo:Award ;
    schema:name xsd:string ;
    dbo:classification xsd:string ;
    dbo:award my_ns:MusicAward ;
    dbo:year xsd:gYear ;
    my_ns:musicalEntity my_ns:MusicalEntity ;
    my_ns:musicWork schema:CreativeWork ;
    my_ns:winner xsd:boolean .

# uri: artist-year
my_ns:YearlyTouringInformation a schema:Class ; #songkick
    rdfs:subClassOf schema:Thing ;
    dbo:year xsd:gYear ;
    my_ns:concertCount xsd:int .

# uri: date-rank
my_ns:BillboardTopEntry a schema:Class ; #Billboard data
    rdfs:subClassOf schema:Thing ;
    dbo:date xsd:date ;
    my_ns:musicalEntity my_ns:MusicalEntity ;
    my_ns:musicWork schema:CreativeWork ;
    dbo:rank xsd:string .

# uri: musicalEntity-count_in_array
my_ns:LiveReview a schema:Class #songkick
    rdfs:subClassOf schema:Review ;
    schema:reviewBody xsd:string ;
    my_ns:musicalEntity my_ns:MusicalEntity ;

# uri: musicalEntity-LivePerformanceReview <-
my_ns:AggregateLiveReview a schema:Class #you can create everything, but the summary
    rdfs:subClassOf schema:AggregateRating ;
    my_ns:summary xsd:string ;
    my_ns:sentimentClass xsd:string ; #nlp_data/z_score_sentiment
    my_ns:sentimentZScore xsd:float ; #nlp_data/z_score_sentiment
    my_ns:topAdjective my_ns:TopAdjective ;
    my_ns:musicalEntity my_ns:MusicalEntity .

# uri: artist-name
my_ns:TopAdjective a schema:Class ;
    rdfs:subClassOf schema:Thing ;
    schema:name xsd:string ; #nlp_data/top_adj_sg_url.p
    dbo:rank xsd:string ; #nlp_data/top_adj_sg_url.p
    my_ns:tfIDF xsd:float . #nlp_data/top_adj_sg_url.p


### Supporting Class New Properites ### 
my_ns:musicalEntity a rdf:Property ;
    rdfs:domain schema:Thing ;
    rdfs:range my_ns:MusicalEntity .

my_ns:musicWork a rdf:Property ;
    rdfs:domain schema:Thing ;
    rdfs:range schema:CreativeWork .

my_ns:concertCount a rdf:Property ;
    rdfs:domain schema:CoMusicalEntity ;
    rdfs:range my_ns:int .

my_ns:summary a rdf:Property ;
    rdfs:domain my_ns:AggregateLiveReview ;
    rdfs:range xsd:string .

my_ns:sentimentClass a rdf:Property ;
    rdfs:domain my_ns:AggregateLiveReview ;
    rdfs:range xsd:string .

my_ns:sentimentZScore a rdf:Property ;
    rdfs:domain my_ns:AggregateLiveReview ;
    rdfs:range xsd:float .

my_ns:topAdjective a rdf:Property ;
    rdfs:domain my_ns:AggregateLiveReview ;
    rdfs:range my_ns:TopAdjective .

my_ns:tfIDF a rdf:Property ;
    rdfs:domain my_ns:TopAdjective
    rdfs:range xsd:float .
